#!/usr/bin/env php
<?php

// Configure these variables for your system:
$lando_real_path = getenv('LW_LANDO_REAL_PATH');
$lando_sites_path_match = getenv('LW_LANDO_SITES_PATH_MATCH')
if (!$lando_real_path || !$lando_sites_path_match) {
    print "Error: You must set these environment variables before using the lando notification wrapper:\n";
    print "\texport LW_LANDO_REAL_PATH=/some/path # Remove this 'lando' file from your \$PATH and type 'which lando'\n";
    print "\texport $lando_sites_path_match=some/part/of/path # Part of the path where your lando sites (apps) are installed. E.g. 'Sites/lando'\n";
    exit(1);
}


$notify = FALSE;

$options = [];
$arguments = [];

$arguments = array_filter($argv, function ($value) use (&$options) {
  if (substr($value, 0, 1) == '-') {
    $options[] = $value;
    return FALSE;
  }
  return TRUE;
});

// Discard path to this script.
array_shift($arguments);

$command = $lando_real_path . ' ' . implode(' ', $arguments) . ' ' . implode(' ', $options);

if ($arguments) {
  switch ($arguments[0]) {
    case "start":
    case "restart":
    case "build":
    case "rebuild":
    case "destroy":
    case "init":
      $notify = TRUE;
      break;
  }
}

// Handle interactive prompt for rebuild and destroy
if (array_intersect([
    'rebuild',
    'destroy'
  ], $arguments) && !array_intersect(['-y', '--yes'], $options)) {

  $question = "Are you sure you want to " . $arguments[0] . "? (y/N)\n";
  $reply = NULL;
  while ($reply != 'y' && $reply != 'n') {
    print $question;
    $handle = fopen("php://stdin", "r");
    $reply = fgets($handle);
    $reply = strtolower(substr(trim($reply), 0, 1));
    $reply = substr($reply, 0, 1);
    if ($reply === "") {
      $reply = 'n';
    }
  }

  if ($reply == 'n') {
    exit(2);
  }
  else {
    // pass the -y option so the real lando doesn't question us.
    $command .= ' -y';
  }
}


if (array_intersect(['-N', '--no-notify'], $options)) {
  $notify = FALSE;
}

// Execute the lando command
exec($command, $out, $exit_code_lando);
print implode("\n", $out);


// Optionally display a notification.
if ($notify) {

  // Determine success of command.
  if ($exit_code_lando == 0) {
    $lando_status = 'Success';
  }
  else {
    $lando_status = "Failed ($exit_code_lando)";
  }

  // Determine site on which we're operating.
  if (array_key_exists(1, $arguments)) {
    $site = $arguments[1];
  }
  else {
    preg_match("@$lando_sites_path_match/(\S+)@", $_SERVER['PWD'], $matches);
    if (is_array($matches) && array_key_exists(1, $matches)) {
      $site = 'Site: ' . $matches[1];
    }
    else {
      $site = '';
    }
  }

  // Display the MacOS notification
  $cmd_oascript = 'osascript -e "display notification \"' . $lando_status . '\" with title \"lando ' . $arguments[0] . '\" subtitle \"' . $site . '\" sound name \"Tink\""';
  exec($cmd_oascript, $out_oascript, $exit_code_oascript);

  if ($exit_code_oascript != 0) {
    print "Error: Failed to execute $cmd_oascript\n";
  }
}

// Append this wrapper's help
if (array_intersect(['-h', '--help'], $options)) {
  print <<<EOT

Lando MacOS notification wrapper:
  
  Options:
  
  --no-notify, -N   Do not display MacOS notification
  
EOT;

}

exit($exit_code_lando);
